### 数组：array：

#### 栈方法

​	1.后入：push();先出pop();在数组尾部添加或弹出数数据，push()返回修改后的数组长度，pop()返回弹出的数据；

#### 队列方法	

​	2.unshift(),shift(),在数组前端添加或弹出数据，，unshift()返回修改后的数组长度，shift()返回弹出的数据；

#### 排序方法

​	1.reverse将原来的数组进行反转并返回更改后的数组；
​	2.sort：在默认情况下会比较数组中的值调用toString()方法后得到的字符串，然后按照升序排列；
​		实现数字类型的排序：从小到大：
​									array.sort(function(a,b){return:a-b})
​							从大到小：
​									array.sort(function(a,b){return:b-a})	

#### 转换方法

​	1.toLocalString(),toString(),valueOf();
​		默认返回以逗号分隔的数组项
​	2.将数组中的元素用连接符连接成字符串：join; 如：array.join("-")，不会改变原数组的数据；

#### 操作方法

​	1.concat:创建一个当前数组的副本，将接收到的参数添加到这个数组的末尾，如果接收的是数组也一样，原数组不变；
​		如：var array=[2,4,5]; var newarray=array.concat(222,"dididi");newarray=[2,4,5,222,"dididi"];
​	2.slice:基于当前数组的一项或多项创建新的数组，如一个参数则 返回接收参数指定位置到数组末尾的所有项，
​			原数组值不变，如：var array=[4,2,6];var array2=array.slice(-2,-1);array2=[2];
​	3.splice:可以在数组的任意部位插入，删除和替换，返回值为删除后的值，原数组会改变；
​		如：var spliceArr = array.splice(1,2,"hello","world")
​			//解释一下，把Array数组进在第1个下标之后删除2个，添加hello world，还个字符串

#### 位置方法

​	1.indexOf：从头开始查找，返回查找结果的下标索引，如果没有找到则返回-1；
​		如：array.indexOf(10,3);//从下为3的数开始查，查找10这个数值；
​	2.lastIndexOf：从尾部开始查找，返回查找结果的下标索引，如果没有找到则返回-1；1.

#### 迭代方法

​	ECMAScript为数组定义了5个迭代方法，每个方法可以接收两个参数；

##### 	1.forEach():

- 在每一项运行函数function(item,index,array){}这里有三个参数分别为，每一项的值，其下标，其原数组；
- 运行其函数的作用域对象，影响的是this的值，这就是第二个参数的作用，改变内部的this指向；
  		如：//首先新建一个this指向类数组对象，然后再进行this改变之后的运用

```javascript
var array = [1,1,1,1,1]
var obj = {
		0 : "z",
		1 : "i",
		2 : "k",
		3 : "s",
		4 : "n",
		length:5
		}
	array.forEach(function(item,index,array){
			console.log(this)  //5次obj 类数组对象
			console.log(this[index])  //=>z,i,k,s,a,n 类型都是String类型
		},obj)
```

> ps:forEach返回值是undefined，map返回的是一个新数组，原数组不变

##### 2.map():

> 对数组的每一项返回，影射成一个新数组；			

```javascript
		如：var array = [1,3,4,5,6]
		var array2 = [7,2,3]
		var mapresult = array.map(function(item,index,array){
			return this.slice(0,2)
			   //解释一下把this指向到array2数组上去，然后把每个进行截取再返回到新数组里
		},array2)
		console.log(mapresult)//5个[7,2];

```
##### 3.filter();

> 过滤，筛选，接收一个每项返回为true的值，如果为true把当前每项的值推入一个新的数组返回出来；

```javascript
var array = [1,2,3,4,6]
	var filteresult = array.filter(function(item,index,array){
		if(item == index+1){  //判断每项值是否等于每项的下标+1
			return true   //则返回true，然后把把项的值推入数组，否则不推
		}
	})
	console.log(filterresult) // [1, 2, 3, 4]
```

##### 4.every();

> 如果每一项都符合条件返回true则最后为true，否则为false；

```javascript
var array = [1,2,3,4,6]
	var everyresult = array.every(function(item,index,array){
		if(item == index+1){
			return true     //因为最后一项的值为false,只有一项为false最后则为false
		}
	})
	console.log(everyresult) //false
```



#### 5.some();

> 只要有一项为true，则结果为true，否则为flase；

```javascript
var array = [1,2,3,4,6]
		var someresult = array.some(function(item,index,array){
			if(item == index+1){
				return true     //只要有一项为true，则最后就返回true
			}
		})
		console.log(someresult)  //true
```



#### 减小方法//汇总

##### 	1.reduce()从0项开始，reduceRight()从最后一项开始;

> 该函数接收一个函数参数，函数接受4个参数：之前值、当前值、索引值以及数组本身。
> initialValue参数可选，表示初始值。若指定，则当作最初使用的previous值；
> 如果缺省，则使用数组的第一个元素作为previous初始值，同时current往后排一位，
> 相比有initialValue值少一次迭代。

```javascript
	var array = [1,2,3]
	var reduceResult= array.reduce(function(pre,cur,index,array){
		return pre-cur
	})      //pre是1 执行1-2 =-1    此时pre就是-1 再-1-3 = -4 迭代到最后一个值停止
	console.log(reduceResult)  //-4
					
	// 求平均数		
	var  arr = [152,44,28,658] 
	var sum =  arr.reduce((pre,item,index)=>{
		if(index<arr.length-1){
			return pre+item       // 第二次进入reduce的pre为前一个return表达式的值
		}else if(index === arr.length-1){
			return (pre+item)/index
		}
	})
	console.log(sum)	
```

​	
​	

##### 2，对 Array 进行扩展

> 为方便使用，我们可以对数组功能进行扩展，增加一些常用的方法。

###### 实现each

```javascript
Array.prototype.each = function(fn){
fn = fn || Function.K;

var a = [];

var args = Array.prototype.slice.call(arguments, 1);

for(var i = 0; i < this.length; i++){
var res = fn.apply(this,[this[i],i].concat(args));

if(res != null) a.push(res);

}

return a;

};
```

###### 数组是否包含指定元素

```javascript
Array.prototype.contains = function(suArr){
for(var i = 0; i < this.length; i ++){
if(this[i] == suArr){
return true;
}
}
return false;
}
```



######  不重复元素构成的数组

```javascript
Array.prototype.uniquelize = function(){
var ra = new Array();

for(var i = 0; i < this.length; i ++){
if(!ra.contains(this[i])){
ra.push(this[i]);

}

}

return ra;

};
```



###### 两个数组的交集

```javascript
Array.intersect = function(a, b){
return a.uniquelize().each(function(o){return b.contains(o) ? o : null});

};
```



###### 两个数组的差集

```javascript
Array.minus = function(a, b){
return a.uniquelize().each(function(o){return b.contains(o) ? null : o});

};
```



###### 两个数组的补集

```javascript
Array.complement = function(a, b){
return Array.minus(Array.union(a, b),Array.intersect(a, b));

};
```



###### 两个数组并集

```javascript
Array.union = function(a, b){
return a.concat(b).uniquelize();

};
```

###### 使用样例

```javascript
var a = [1,2,3,4,5]

var b = [2,4,6,8,10]

console.log("数组a：", a);

console.log("数组b：", b);

console.log("a与b的交集：", Array.intersect(a, b));

console.log("a与b的差集：", Array.minus(a, b));

console.log("a与b的补集：", Array.complement(a, b));

console.log("a与b的并集：", Array.union(a, b));
```

####  ES6 语法

##### Array.flat

```javascript
const arr = [1, 2, 3, [4, 5, 6, [7, 8, 9]]]

console.log(arr.flat(2))
[
  1, 2, 3, 4, 5,
  6, 7, 8, 9
]

```

##### Array.flatMap

```javascript
现在给你一个需求
let arr = ["科比 詹姆斯 安东尼", "利拉德 罗斯 麦科勒姆"];
将上面数组转为
[ '科比', '詹姆斯', '安东尼', '利拉德', '罗斯', '麦科勒姆' ]
第一时间想到map + flat
console.log(arr.map(x => x.split(" ")).flat());
// [ '科比', '詹姆斯', '安东尼', '利拉德', '罗斯', '麦科勒姆' ]
flatMap就是flat + map，一个方法顶两个
console.log(arr.flatMap(x => x.split(" ")));
// [ '科比', '詹姆斯', '安东尼', '利拉德', '罗斯', '麦科勒姆' ]

```

##### ?. 和 ??

````javascript
//比如我们需要一个变量，是数组且有长度，才做某些操作
const list = null
// do something
if (list && list.length) {
  // do something
}

// 使用可选链
const list = null
// do something
if (list?.length) {
  // do something
}

//比如有一个对象，我要取一个可能不存在的值，甚至我们都不确定obj是否存在
const obj = {
  cat: {
    name: '哈哈'
  }
}
const dog = obj && obj.dog && obj.dog.name // undefined

// 可选链
const obj = {
  cat: {
    name: '哈哈'
  }
}
const dog = obj?.dog?.name // undefined

//比如有一个数组，我不确定它存不存在，存在的话就取索引为1的值

const arr = null
// do something
const item = arr && arr[1]

// 可选链
const arr = null
// do something
const item = arr?.[1]

// 比如有一个函数，我们不确定它存不存在，存在的话就执行它
const fn = null
// do something
const res = fn && fn()

// 可选链
const fn = null
// do something
const res = fn?.()

````



##### ||= 和 &&=

```javascript
或等于(||=)   a ||= b 等同于 a || (a = b);

且等于(&&=)   a &&= b 等同于 a && (a = b);

```

#### 去重

> [1, 2, 3, 3, 3, '0', '1', '2', '测试', '重复', '重复', NaN, NaN, false, false];

##### 方法一：ES6 Set()

```javascript
let arr = [1, 2, 3, 3, 3, '0', '1', '2', '测试', '重复', '重复', NaN, NaN, false, false];
arr = [...new Set(arr)]; //去重后:  [ 1, 2, 3, '0', '1', '2', '测试', '重复', NaN, false ]

//Set 是ES6新加的集合,集合中的值不会重复。 ...操作符 会将可遍历对象,转换为数组.
```

##### 方法二：利用对象

```javascript
		let arr = [1, 2, 3, 3, 3, '0', '1', '2', '测试', '重复', '重复', NaN, NaN, false, false];
		let obj ={};
		let temp=[];
		for( let i = 0; i < arr.length; i++ ) {
		let type= Object.prototype.toString.call(arr[i]);//不加类型 分不清 1 '1'  
		if( !obj[ arr[i] +type] ) {
			  temp.push( arr[i] );
			  obj[ arr[i]+ type ] =true;//这里给true 利于代码阅读和判断。  如果给 0,'' ,false ,undefined 都会在if那里判断为 false 不利于代码阅读
			  }
		}
		console.log(temp)//去重后:  [ 1, 2, 3, '0', '1', '2', '测试', '重复', NaN, false ]
```



##### 方法三：sort排序后 在去重

```javascript
	//1.使用Object.is
	let arr = [1, 2, 3, 3, 3, '0', '1', '2', '测试', '重复', '重复', NaN, NaN, false, false];
	arr = arr.sort();
	let temp =[];
	while(arr.length > 0) {
			if( Object.is(arr[0], arr[1]) ) {//Object.is() 用于比较2个值, 比===更靠谱  例如 Object.is(NaN,NaN) 会判断true
				  arr.shift();
			}else{
				  temp.push( arr.shift() );
	}
	}//此方法会清空原数组,  你可以复制个数组,在去进行操作
	console.log(temp)//去重后:  [ '0', 1, '1', '2', 2, 3, NaN, false, '测试', '重复' ]
	//2.使用for循环
	var seen=0
	for(var i=0;i<arr.length;i++){
		if（!i && seen !== arr[i]）{
			temp.push(arr[i])
		}
		seen = arr[i]
	}	
```

​	

##### 方法四：for in

```javascript
let arr = [1, 2, 3, 3, 3, '0', '1', '2', '测试', '重复', '重复', NaN, NaN, false, false];
let temp =[];
for(let i = 0; i < arr.length; i++) {
		if( !temp.includes( arr[i]) ) {//includes 检测数组是否有某个值 内部调用Object.is() 利用判断NaN
				temp.push(arr[i]);
		  }
}
console.log(temp);//去重后:  [ 1, 2, 3, '0', '1', '2', '测试', '重复', NaN, false ]
```
##### 方法五：filter

```javascript
let arr = [1, 2, 3, 3, 3, '0', '1', '2', '测试', '重复', '重复', NaN, NaN, false, false];
```



#### 排序



##### 快速排序

> 从给定的数据中，随机抽出一项，这项的左边放所有比它小的，右边放比它大的，然后再分别这两边执行上述操作，采用的是递归的思想，总结出来就是　实现一层，分别给两边递归，设置好出口

```javascript

function fastSort(array,head,tail){
    //考虑到给每个分区操作的时候都是在原有的数组中进行操作的，所以这里head,tail来确定分片的位置
    /*生成随机项*/
    var randomnum = Math.floor(ranDom(head,tail));
    var random = array[randomnum];
    /*将小于random的项放置在其左边  策略就是通过一个临时的数组来储存分好区的结果，再到原数组中替换*/
    var arrayTemp = [];
    var unshiftHead = 0;
    for(var i = head;i <= tail;i++){
      if(array[i]<random){
        arrayTemp.unshift(array[i]);
        unshiftHead++;
      }else if(array[i]>random){
        arrayTemp.push(array[i]);
      }
      /*当它等于的时候放哪，这里我想选择放到队列的前面，也就是从unshift后的第一个位置放置*/
      if(array[i]===random){
        arrayTemp.splice(unshiftHead,0,array[i]);
      }
    }
    /*将对应项覆盖原来的记录*/
    for(var j = head , u=0;j <= tail;j++,u++){
      array.splice(j,1,arrayTemp[u]);
    }
    /*寻找中间项所在的index*/
    var nowIndex = array.indexOf(random);

    /*设置出口，当要放进去的片段只有2项的时候就可以收工了*/
    if(arrayTemp.length <= 2){
      return;
    }
    /*递归，同时应用其左右两个区域*/
    fastSort(array,head,nowIndex);
    fastSort(array,nowIndex+1,tail);

  }
```



##### 插入排序

> 思想就是在已经排好序的数组中插入到相应的位置，以从小到大排序为例，扫描已经排好序的片段的每一项，如大于，则继续往后，直到他小于一项时，将其插入到这项的前面

```javascript
function insertSort(array){
    /*start根据已排列好的项数决定*/
    var start=1;
    /*按顺序，每一项检查已排列好的序列*/
    for(var i=start; i<array.length; start++,i++){
      /*跟已排好序的序列做对比，并插入到合适的位置*/
      for(var j=0; j<start; j++){
        /*小于或者等于时（我们是升序）插入到该项前面*/
        if(array[i]<=array[j]){
          console.log(array[i]+' '+array[j]);
          array.splice(j,0,array[i]);
          /*删除原有项*/
          array.splice(i+1,1);
          break;
        }
      }
    }
  }
```



##### 冒泡排序

>故名思意 ，就是一个个冒泡到最前端或者最后端，主要是通过两两依次比较，以升序为例，如果前一项比后一项大则交换顺序，一直比到最后
>一对

```javascript
function bubbleSort(array){
    /*给每个未确定的位置做循环*/
    for(var unfix=array.length-1; unfix>0; unfix--){
      /*给进度做个记录，比到未确定位置*/
      for(var i=0; i<unfix;i++){
        if(array[i]>array[i+1]){
          var temp = array[i];
          array.splice(i,1,array[i+1]);
          array.splice(i+1,1,temp);
        }
      }
    }
  }
```



##### 选择排序

```javascript
将当前未确定块的min或者max取出来插到最前面或者后面

function selectSort(array){
	/*给每个插入后的未确定的范围循环，初始是从0开始*/
	for(var unfixed=0; unfixed<array.length; unfixed++){
	  /*设置当前范围的最小值和其索引*/
	  var min = array[unfixed];
	  var minIndex = unfixed;
	  /*在该范围内选出最小值*/
	  for(var j=unfixed+1; j<array.length; j++){
		if(min>array[j]){
		  min = array[j];
		  minIndex = j;
		}
	  }
	  /*将最小值插入到unfixed，并且把它所在的原有项替换成*/
	  array.splice(unfixed,0,min);
	  array.splice(minIndex+1,1);
	}
  }
```

> 总结一下，实现思想是很简单的,难点在于如何创造思想，还有就是个人的测试能力，和编程习惯，做注释其实不是仅仅为了别人看得更方便，而是自己思路的记录，有些人编着编着容易断片，注释起到了很好的引导作用

#### 	JS数组遍历：

**1.普通for循环**

```
var arr = [1,2,0,3,9];
 for ( var i = 0; i <arr.length; i++){
    console.log(arr[i]);
}
```

**2.优化版for循环**

使用变量，将长度缓存起来，避免重复获取长度，数组很大时优化效果明显

```
for(var j = 0,len = arr.length; j < len; j++){
    console.log(arr[j]);
}
```

**3.forEach**

ES5推出的,数组自带的循环，主要功能是遍历数组，实际性能比for还弱

arr.forEach(function(value,i){
　　console.log('forEach遍历:'+i+'--'+value);

})

**forEach这种方法也有一个小缺陷：你不能使用break语句中断循环，也不能使用return语句返回到外层函数。**

**4.map遍历**

map即是 “映射”的意思 用法与 forEach 相似,同样**不能使用break语句中断循环，也不能使用return语句返回到外层函数。**

```
arr.map(function(value,index){
    console.log('map遍历:'+index+'--'+value);
});
```

map遍历支持使用return语句，支持return返回值

```
var temp=arr.map(function(val,index){
  console.log(val);  
  return val*val           
})
console.log(temp);  
```

forEach、map都是ECMA5新增数组的方法，所以ie9以下的浏览器还不支持

**5.for-of遍历**

ES6新增功能

```
for( let i of arr){
    console.log(i);
}
```

- for-of这个方法避开了for-in循环的所有缺陷
- 与forEach()不同的是，它可以正确响应break、continue和return语句 

for-of循环不仅支持数组，还支持大多数类数组对象，例如DOM NodeList对象。for-of循环也支持字符串遍历

 

## JS对象遍历：

**1.for-in遍历**

for-in是为遍历对象而设计的，不适用于遍历数组。(遍历数组的缺点：数组的下标index值是数字，for-in遍历的index值"0","1","2"等是字符串)

for-in循环存在缺陷：循环会遍历对象自身的和继承的可枚举属性(不含Symbol属性)

```
for (var index in arr){
    console.log(arr[index]);
    console.log(index);
}
```

**2.使用Object.keys()遍历**

返回一个数组,包括对象自身的(不含继承的)所有可枚举属性(不含Symbol属性).

```
var obj = {'0':'a','1':'b','2':'c'};

Object.keys(obj).forEach(function(key){

     console.log(key,obj[key]);

});
```



**3.使用Object.getOwnPropertyNames(obj)遍历**

返回一个数组,包含对象自身的所有属性(不含Symbol属性,但是包括不可枚举属性). 

```
var obj = {'0':'a','1':'b','2':'c'};
Object.getOwnPropertyNames(obj).forEach(function(key){

    console.log(key,obj[key]);

});
```



**4.使用Reflect.ownKeys(obj)遍历**

返回一个数组,包含对象自身的所有属性,不管属性名是Symbol或字符串,也不管是否可枚举. 

```
var obj = {'0':'a','1':'b','2':'c'};
Reflect.ownKeys(obj).forEach(function(key){

　　console.log(key,obj[key]);

});
```

