### grid

> Grid 布局则是将容器划分成"行"和"列"，产生单元格，然后指定"项目所在"的单元格，可以看作是**二维布局**



#### 容器属性

```css
div {
  display: grid;
}

div {
  display: inline-grid;
}
/*
注意，设为网格布局以后，容器子元素（项目）的float、display: inline-block、display: table-cell、vertical-align和column-*等设置都将失效。
*/
```

#### grid-template-columns 属性， grid-template-rows 属性

> `grid-template-columns`属性定义每一列的列宽，`grid-template-rows`属性定义每一行的行高。

```css
.container {
  display: grid;
  grid-template-columns: 100px 100px 100px;
  grid-template-rows: 100px 100px 100px;
}
/*repeat函数可以简化重复的值 */
.container {
  display: grid;
  grid-template-columns: repeat(3, 33.33%);
  grid-template-rows: repeat(3, 33.33%);
}
```

##### **auto-fill 关键字**

> 可以使用`auto-fill`关键字表示自动填充单元格

```css
.container {
  display: grid;
  grid-template-columns: repeat(auto-fill, 100px); /*尽可能多的填充宽度为100px的列*/
}
```

##### **fr 关键字**

> 表示比例关系，网格布局提供了`fr`关键字（fraction 的缩写，意为"片段"）。如果两列的宽度分别为`1fr`和`2fr`，就表示后者是前者的两倍

```css
.container {
  display: grid;
  grid-template-columns: 1fr 1fr;
}

.container {
  display: grid;
  grid-template-columns: 150px 1fr 2fr;
}

.wrapper {
  display: grid;
 grid-template-columns: repeat(12, 1fr);
}
```

##### **minmax()**

> 表示长度就在这个范围之中。它接受两个参数，分别为最小值和最大值

```css
grid-template-columns: 1fr 1fr minmax(100px, 1fr);
/*minmax(100px, 1fr)表示列宽不小于100px，不大于1fr*/
```

##### **auto 关键字**

> 表示由浏览器自己决定长度

```css
grid-template-columns: 100px auto 100px;
```

##### **网格线的名称**

> `grid-template-columns`属性和`grid-template-rows`属性里面，还可以使用方括号，指定每一根网格线的名字，方便以后的引用。

```css
.container {
  display: grid;
  grid-template-columns: [c1] 100px [c2] 100px [c3] auto [c4];
  grid-template-rows: [r1] 100px [r2] 100px [r3] auto [r4];
}
/*
    上面代码指定网格布局为3行 x 3列，因此有4根垂直网格线和4根水平网格线。方括号里面依次是这八根线的名字。
    网格布局允许同一根线有多个名字，比如[fifth-line row-5]
*/
```



#### grid-row-gap 属性， grid-column-gap 属性， grid-gap 属性



> `grid-row-gap`属性设置行与行的间隔（行间距），`grid-column-gap`属性设置列与列的间隔（列间距）。`grid-gap`属性是`grid-column-gap`和`grid-row-gap`的合并简写

```css
.container {
  grid-row-gap: 20px;
  grid-column-gap: 20px;
}

.container {
  grid-gap: 20px 20px;
}
```



####  grid-template-areas 属性



> 网格布局允许指定"区域"（area），一个区域由单个或多个单元格组成。`grid-template-areas`属性用于定义区域。

```css
.container {
  display: grid;
  grid-template-columns: 100px 100px 100px;
  grid-template-rows: 100px 100px 100px;
  grid-template-areas: 'a b c'
                       'd e f'
                       'g h i';
}
```



#### grid-auto-flow 属性



> 划分网格以后，容器的子元素会按照顺序，自动放置在每一个网格。默认的放置顺序是"先行后列"，即先填满第一行，再开始放入第二行

```css
/* 默认值是row，即"先行后列"。也可以将它设成column，变成"先列后行"。*/
grid-auto-flow: column;
/* 设为row dense，表示"先行后列"，并且尽可能紧密填满，尽量不出现空格。*/
grid-auto-flow: row dense;
```



#### justify-items 属性， align-items 属性， place-items 属性



> `justify-items`属性设置单元格内容的水平位置（左中右），`align-items`属性设置单元格内容的垂直位置（上中下）。

```css
.container {
  justify-items: start | end | center | stretch;
  align-items: start | end | center | stretch;
  /* 
  start：对齐单元格的起始边缘 | end：对齐单元格的结束边缘 | center：单元格内部居中 | stretch：拉伸，占满单元格的整个宽度（默认值）。*/
}
```

> `place-items`属性是`align-items`属性和`justify-items`属性的合并简写形式。

```css
place-items: <align-items> <justify-items>;
place-items: start end;
```



#### justify-content 属性， align-content 属性， place-content 属性

> `justify-content`属性是整个内容区域在容器里面的水平位置（左中右），`align-content`属性是整个内容区域的垂直位置（上中下）

```css
.container {
  justify-content: start | end | center | stretch | space-around | space-between | space-evenly;
  align-content: start | end | center | stretch | space-around | space-between | space-evenly;  
}
/* 对齐容器的起始边框 | 对齐容器的结束边框 | 容器内部居中 | 项目大小没有指定时，拉伸占据整个网格容器 | 每个项目两侧的间隔相等。所以，项目之间的间隔比项目与容器边框的间隔大一倍 | 项目与项目的间隔相等，项目与容器边框之间没有间隔 | 项目与项目的间隔相等，项目与容器边框之间也是同样长度的间隔 */
```

> `place-content`属性是`align-content`属性和`justify-content`属性的合并简写形式。

```css
place-content: <align-content> <justify-content>
place-content: space-around space-evenly;
```



#### grid-auto-columns 属性， grid-auto-rows 属性

`grid-auto-columns`属性和`grid-auto-rows`属性用来设置，浏览器自动创建的多余网格的列宽和行高。它们的写法与`grid-template-columns`和`grid-template-rows`完全相同。如果不指定这两个属性，浏览器完全根据单元格内容的大小，决定新增网格的列宽和行高。

```css
.container {
  display: grid;
  grid-template-columns: 100px 100px 100px;
  grid-template-rows: 100px 100px 100px;
  grid-auto-rows: 50px; 
}
```

#### grid-template 属性， grid 属性

`grid-template`属性是`grid-template-columns`、`grid-template-rows`和`grid-template-areas`这三个属性的合并简写形式。

`grid`属性是`grid-template-rows`、`grid-template-columns`、`grid-template-areas`、 `grid-auto-rows`、`grid-auto-columns`、`grid-auto-flow`这六个属性的合并简写形式。

### 项目属性

#### grid-column-start 属性， grid-column-end 属性， grid-row-start 属性， grid-row-end 属性

- `grid-column-start`属性：左边框所在的垂直网格线
- `grid-column-end`属性：右边框所在的垂直网格线
- `grid-row-start`属性：上边框所在的水平网格线
- `grid-row-end`属性：下边框所在的水平网格线

```css

.item-1 {
  grid-column-start: 1;
  grid-column-end: 3;
  grid-row-start: 2;
  grid-row-end: 4;
}
/*span关键字，表示"跨越"，即左右边框（上下边框）之间跨越多少个网格*/
.item-1 {
  grid-column-start: span 2;
}
/*使用这四个属性，如果产生了项目的重叠，则使用z-index属性指定项目的重叠顺序。*/
```

#### grid-column 属性， grid-row 属性

> `grid-column`属性是`grid-column-start`和`grid-column-end`的合并简写形式，`grid-row`属性是`grid-row-start`属性和`grid-row-end`的合并简写形式。

```css
.item {
  grid-column: <start-line> / <end-line>;
  grid-row: <start-line> / <end-line>;
}
```

```css
.item-1 {
  grid-column: 1 / 3;
  grid-row: 1 / 2;
}
/* 等同于 */
.item-1 {
  grid-column-start: 1;
  grid-column-end: 3;
  grid-row-start: 1;
  grid-row-end: 2;
}

.item-1 {
  background: #b03532;
  grid-column: 1 / 3;
  grid-row: 1 / 3;
}
/* 等同于 */
.item-1 {
  background: #b03532;
  grid-column: 1 / span 2;
  grid-row: 1 / span 2;
}
```

#### grid-area 属性

`grid-area`属性指定项目放在哪一个区域

```css
.item-1 {
  grid-area: e;
}
/* `grid-area`属性还可用作`grid-row-start`、`grid-column-start`、`grid-row-end`、`grid-column-end`的合并简写形式，直接指定项目的位置。*/
.item {
  grid-area: <row-start> / <column-start> / <row-end> / <column-end>;
}
.item-1 {
  grid-area: 1 / 1 / 3 / 3;
}
```

#### justify-self 属性， align-self 属性， place-self 属性

`justify-self`属性设置单元格内容的水平位置（左中右），跟`justify-items`属性的用法完全一致，但只作用于单个项目。

`align-self`属性设置单元格内容的垂直位置（上中下），跟`align-items`属性的用法完全一致，也是只作用于单个项目。

```css
.item {
  justify-self: start | end | center | stretch;
  align-self: start | end | center | stretch;
}
```

`place-self`属性是`align-self`属性和`justify-self`属性的合并简写形式。

```css
place-self: <align-self> <justify-self>;
```

